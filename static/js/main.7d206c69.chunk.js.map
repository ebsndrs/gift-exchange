{"version":3,"sources":["components/HouseholdsList.tsx","components/PeopleList.tsx","components/RulesList.tsx","components/MatchesList.tsx","matching/MatchHelper.tsx","index.tsx","App.tsx"],"names":["HouseholdsList","props","useState","householdInput","setHouseholdInput","isAddButtonDisabled","setIsAddButtonDisabled","onAddButtonClicked","addHousehold","List","subheader","ListSubheader","ListItem","ListItemText","TextField","label","onChange","event","target","value","trimmedHousehold","trim","households","some","h","undefined","onHouseholdInputChange","onKeyUp","keyCode","preventDefault","onHouseholdInputKeyPress","ListItemSecondaryAction","Button","disabled","variant","color","onClick","filter","household","map","key","ListItemIcon","primary","fullWidth","removeHousehold","PeopleList","name","gender","genders","age","personInput","setPersonInput","addPerson","Card","CardHeader","title","action","IconButton","resetPeople","CardContent","TableContainer","Table","TableHead","TableRow","TableCell","style","width","FormControl","id","placeholder","trimmedName","people","p","onPersonInputNameChange","onPersonInputKeyPress","InputLabel","Select","onSelectedHouseholdChange","MenuItem","onSelectedGenderChange","type","inputProps","min","TableBody","person","removePerson","RulesList","Switch","edge","changeRule","checked","rules","preventCircularGifting","preventSameHousehold","preventSameGender","preventSameAgeGroup","MatchesList","regenerateMatches","areMatchesGenerating","Box","justifyContent","CircularProgress","areMatchesValid","matches","match","index","gifter","giftee","textAlign","m","Typography","matchesMessage","MatchHelper","this","adjacencyMatrix","i","length","j","push","k","lastGifter","lastGiftee","peopleLength","matrix","isMatchGood","shuffledPeople","Math","floor","random","gifterCount","gifteeCount","bpGraph","vertex","seen","matchR","v","bipartiteMatching","Array","result","u","ReactDOM","render","matchHelper","state","setState","generateMatches","shufflePeople","buildAdjacencyMatrix","maximumBipartiteMatching","sort","firstMatch","secondMatch","localeCompare","useEffect","className","Grid","container","spacing","item","xs","md","includes","findIndex","forEach","splice","document","getElementById"],"mappings":"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","file":"static/js/main.7d206c69.chunk.js","sourcesContent":["import { Button, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, ListSubheader, TextField } from '@material-ui/core';\r\nimport HouseIcon from '@material-ui/icons/House';\r\nimport React, { useState } from 'react';\r\nimport HouseholdsListProps from '../interfaces/HouseholdsListProps';\r\n\r\nexport default function HouseholdsList(props: HouseholdsListProps) {\r\n  const [householdInput, setHouseholdInput] = useState('');\r\n  const [isAddButtonDisabled, setIsAddButtonDisabled] = useState(true);\r\n\r\n  const onHouseholdInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setHouseholdInput(event.target.value);\r\n\r\n    const trimmedHousehold = event.target.value.trim();\r\n    const isAddButtonDisabled = trimmedHousehold === '' ||\r\n      props.households.some(h => h === trimmedHousehold) ||\r\n      trimmedHousehold === undefined;\r\n\r\n    setIsAddButtonDisabled(isAddButtonDisabled);\r\n  }\r\n\r\n  const onHouseholdInputKeyPress = (event: React.KeyboardEvent<HTMLDivElement | HTMLTextAreaElement>) => {\r\n    if (event.keyCode === 13) {\r\n      const shouldAddHousehold = householdInput !== '' &&\r\n        !props.households.some(h => h === householdInput) &&\r\n        householdInput !== undefined;\r\n      if (shouldAddHousehold) {\r\n        event.preventDefault();\r\n        onAddButtonClicked();\r\n      }\r\n    }\r\n  }\r\n\r\n  const onAddButtonClicked = () => {\r\n    props.addHousehold(householdInput);\r\n    setHouseholdInput('');\r\n    setIsAddButtonDisabled(true);\r\n  }\r\n\r\n  return (\r\n    <List subheader={<ListSubheader>Households</ListSubheader>}>\r\n      <ListItem>\r\n        <ListItemText>\r\n          <TextField\r\n            label=\"Add Household\"\r\n            onChange={(event) => onHouseholdInputChange(event)}\r\n            onKeyUp={(event) => onHouseholdInputKeyPress(event)}\r\n            value={householdInput}\r\n          />\r\n        </ListItemText>\r\n        <ListItemSecondaryAction>\r\n          <Button\r\n            disabled={isAddButtonDisabled}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={onAddButtonClicked}\r\n          >\r\n            Add\r\n          </Button>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      {props.households.filter(household => household !== props.households[0]).map(household =>\r\n        <ListItem key={household}>\r\n          <ListItemIcon>\r\n            <HouseIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary={household} />\r\n          <ListItemSecondaryAction>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => props.removeHousehold(household)}\r\n            >\r\n              Remove\r\n            </Button>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      )}\r\n    </List>\r\n  );\r\n}","import { Button, Card, CardContent, CardHeader, FormControl, IconButton, InputLabel, MenuItem, Select, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField } from \"@material-ui/core\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport React, { useState } from \"react\";\r\nimport PeopleListProps from \"../interfaces/PeopleListProps\";\r\nimport Person from \"../interfaces/Person\";\r\n\r\nexport default function PeopleList(props: PeopleListProps) {\r\n  const [personInput, setPersonInput] = useState<Person>({\r\n    name: '',\r\n    household: props.households[0],\r\n    gender: props.genders[0],\r\n    age: 0\r\n  });\r\n  const [isAddButtonDisabled, setIsAddButtonDisabled] = useState(true);\r\n\r\n  const onPersonInputNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setPersonInput({\r\n      ...personInput,\r\n      name: event.target.value\r\n    });\r\n\r\n    const trimmedName = event.target.value.trim();\r\n    const isAddButtonDisabled = trimmedName === '' ||\r\n      props.people.some(p => p.name === trimmedName) ||\r\n      trimmedName === undefined;\r\n\r\n    setIsAddButtonDisabled(isAddButtonDisabled);\r\n  }\r\n\r\n  const onPersonInputKeyPress = (event: React.KeyboardEvent<HTMLDivElement | HTMLTextAreaElement>) => {\r\n    if (event.keyCode === 13) {\r\n      const shouldAddPerson = personInput.name !== '' &&\r\n        !props.people.some(p => p.name === personInput.name) &&\r\n        personInput.name !== undefined;\r\n\r\n      if (shouldAddPerson) {\r\n        event.preventDefault();\r\n        onAddButtonClicked();\r\n      }\r\n    }\r\n  }\r\n\r\n  const onSelectedHouseholdChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = event.target.value as string;\r\n    value.trim();\r\n\r\n    if (value !== undefined && value !== '') {\r\n      setPersonInput({\r\n        ...personInput,\r\n        household: value\r\n      });\r\n    }\r\n  }\r\n\r\n  const onSelectedGenderChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = event.target.value as string;\r\n    value.trim();\r\n\r\n    if (value !== undefined && value !== '') {\r\n      setPersonInput({\r\n        ...personInput,\r\n        gender: value\r\n      });\r\n    }\r\n  }\r\n\r\n  const onAddButtonClicked = () => {\r\n    props.addPerson(personInput);\r\n\r\n    setPersonInput({\r\n      name: '',\r\n      household: props.households[0],\r\n      gender: props.genders[0],\r\n      age: 0\r\n    });\r\n\r\n    setIsAddButtonDisabled(true);\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        title=\"People\"\r\n        action={\r\n          <IconButton>\r\n            <ClearIcon onClick={props.resetPeople} />\r\n          </IconButton>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell style={{ width: '30%' }}>\r\n                  <FormControl fullWidth>\r\n                    <TextField\r\n                      id=\"personInputName\"\r\n                      placeholder=\"Name\"\r\n                      label=\"Name\"\r\n                      value={personInput.name}\r\n                      onChange={(event) => onPersonInputNameChange(event)}\r\n                      onKeyUp={(event) => onPersonInputKeyPress(event)}\r\n                    />\r\n                  </FormControl>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel>Household</InputLabel>\r\n                    <Select\r\n                      id=\"personInputHousehold\"\r\n                      value={personInput.household}\r\n                      onChange={(event: React.ChangeEvent<{ value: unknown; }>) => onSelectedHouseholdChange(event)}\r\n                    >\r\n                      {props.households.map(household =>\r\n                        <MenuItem key={household} value={household}>{household}</MenuItem>\r\n                      )}\r\n                    </Select>\r\n                  </FormControl>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel>Gender</InputLabel>\r\n                    <Select\r\n                      id=\"personInputGender\"\r\n                      value={personInput.gender}\r\n                      onChange={(event: React.ChangeEvent<{ value: unknown; }>) => onSelectedGenderChange(event)}\r\n                    >\r\n                      {props.genders.map(gender =>\r\n                        <MenuItem key={gender} value={gender}>{gender}</MenuItem>\r\n                      )}\r\n                    </Select>\r\n                  </FormControl>\r\n                </TableCell>\r\n                <TableCell style={{ width: '11%' }}>\r\n                  <FormControl fullWidth>\r\n                    <TextField\r\n                      id=\"personInputAge\"\r\n                      type=\"number\"\r\n                      placeholder=\"Age\"\r\n                      label=\"Age\"\r\n                      value={personInput.age}\r\n                      inputProps={{ min: '1' }}\r\n                    />\r\n                  </FormControl>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onAddButtonClicked}\r\n                    disabled={isAddButtonDisabled}\r\n                  >\r\n                    Add\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>Household</TableCell>\r\n                <TableCell>Gender</TableCell>\r\n                <TableCell>Age</TableCell>\r\n                <TableCell></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {props.people.map(person =>\r\n                <TableRow key={person.name}>\r\n                  <TableCell>{person.name}</TableCell>\r\n                  <TableCell>{person.household}</TableCell>\r\n                  <TableCell>{person.gender}</TableCell>\r\n                  <TableCell>{person.age > 0 ? person.age : \"None\"}</TableCell>\r\n                  <TableCell>\r\n                    <Button\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={() => props.removePerson(person.name)}\r\n                    >\r\n                      Remove\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","import { List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, ListSubheader, Switch } from '@material-ui/core';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport HouseIcon from '@material-ui/icons/House';\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport React from 'react';\r\nimport RulesListProps from '../interfaces/RulesListProps';\r\n\r\nexport default function RulesList(props: RulesListProps) {\r\n  return (\r\n    <List subheader={<ListSubheader>Rules</ListSubheader>}>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <SyncIcon />\r\n        </ListItemIcon>\r\n        <ListItemText id=\"switch-list-label-preventCircularGifting\" primary=\"Prevent Circular Gifting\" />\r\n        <ListItemSecondaryAction>\r\n          <Switch\r\n            edge=\"end\"\r\n            onChange={(event) => props.changeRule('preventCircularGifting', event.target.checked)}\r\n            checked={props.rules.preventCircularGifting}\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <HouseIcon />\r\n        </ListItemIcon>\r\n        <ListItemText id=\"switch-list-label-preventSameHousehold\" primary=\"Prevent Same Household\" />\r\n        <ListItemSecondaryAction>\r\n          <Switch\r\n            edge=\"end\"\r\n            onChange={(event) => props.changeRule('preventSameHousehold', event.target.checked)}\r\n            checked={props.rules.preventSameHousehold}\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <WcIcon />\r\n        </ListItemIcon>\r\n        <ListItemText id=\"switch-list-label-preventSameGender\" primary=\"Prevent Same Gender\" />\r\n        <ListItemSecondaryAction>\r\n          <Switch\r\n            edge=\"end\"\r\n            onChange={(event) => props.changeRule('preventSameGender', event.target.checked)}\r\n            checked={props.rules.preventSameGender}\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <DateRangeIcon />\r\n        </ListItemIcon>\r\n        <ListItemText id=\"switch-list-label-preventSameAgeGroup\" primary=\"Prevent Same Age Group\" />\r\n        <ListItemSecondaryAction>\r\n          <Switch\r\n            edge=\"end\"\r\n            onChange={(event) => props.changeRule('preventSameAgeGroup', event.target.checked)}\r\n            checked={props.rules.preventSameAgeGroup}\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n    </List>\r\n  );\r\n}","import { Box, Card, CardHeader, CircularProgress, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport React from 'react';\r\nimport MatchesListProps from '../interfaces/MatchesListProps';\r\n\r\nexport default function MatchesList(props: MatchesListProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        title=\"Matches\"\r\n        action={\r\n          <IconButton>\r\n            <RefreshIcon onClick={props.regenerateMatches}/>\r\n          </IconButton>\r\n        }\r\n      />\r\n      {props.areMatchesGenerating ?\r\n        (\r\n          <Box justifyContent=\"center\">\r\n            <CircularProgress />\r\n          </Box>\r\n        ) :\r\n        (\r\n          props.areMatchesValid ?\r\n            (\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Gifter</TableCell>\r\n                      <TableCell>Giftee</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {props.matches.map((match, index) =>\r\n                      <TableRow key={index}>\r\n                        <TableCell>{match.gifter.name}</TableCell>\r\n                        <TableCell>{match.giftee.name}</TableCell>\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            ) :\r\n            (\r\n              <Box textAlign=\"center\" m={3}>\r\n                <Typography>{props.matchesMessage}</Typography>\r\n              </Box>\r\n            )\r\n        )}\r\n    </Card>\r\n  );\r\n}","import Person from \"../interfaces/Person\";\r\nimport Rules from \"../interfaces/Rules\";\r\nimport Match from \"../interfaces/Match\";\r\n\r\nexport default class MatchHelper {\r\n  genders: string[];\r\n\r\n  constructor(genders: string[]) {\r\n    this.genders = genders;\r\n  }\r\n\r\n  generateMatches(people: Person[], adjacencyMatrix: number[][]): Match[] {\r\n    let matches: Match[] = [];\r\n\r\n    //iterate through the gifters to assign each one a match\r\n    for (let i = 0; i < people.length; i++) {\r\n      const gifter = people[i];\r\n\r\n      for (let j = 0; j < people.length; j++) {\r\n        const giftee = people[j];\r\n\r\n        if (adjacencyMatrix[i][j] > 0 && adjacencyMatrix[j][i] > 0) {\r\n          matches.push({ gifter: gifter, giftee: giftee });\r\n          adjacencyMatrix[i][j] = 0;\r\n          adjacencyMatrix[j][i] = 0;\r\n          for (let k = 0; k < adjacencyMatrix[i].length; k++) {\r\n            adjacencyMatrix[i][k] = 0;\r\n            adjacencyMatrix[k][i] = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (matches.length < people.length) {\r\n      const lastGifter = people[people.length - 1];\r\n      const lastGiftee = people[0];\r\n\r\n      matches.push({ gifter: lastGifter, giftee: lastGiftee });\r\n    }\r\n\r\n    return matches;\r\n  }\r\n\r\n  areMatchesValid(peopleLength: number, matches: Match[], households: string[], rules: Rules): boolean {\r\n    let areMatchesValid = true;\r\n\r\n    //matches length must be equal to people length\r\n    if (matches.length !== peopleLength) {\r\n      areMatchesValid = false;\r\n    } else {\r\n      for (let i = 0; i < matches.length; i++) {\r\n        const match = matches[i];\r\n  \r\n        //one cannot give to themself\r\n        if (match.gifter.name === match.giftee.name) {\r\n          areMatchesValid = false;\r\n          break;\r\n        }\r\n  \r\n        //if there's more than one of the same gifter, it's invalid\r\n        if (matches.filter(m => m.gifter.name === match.gifter.name).length > 1) {\r\n          areMatchesValid = false;\r\n          break;\r\n        }\r\n  \r\n        //if there's more than one of the same giftee, it's invalid\r\n        if (matches.filter(m => m.giftee.name === match.giftee.name).length > 1) {\r\n          areMatchesValid = false;\r\n          break;\r\n        }\r\n  \r\n        if (rules.preventCircularGifting) {\r\n          //logic\r\n        }\r\n  \r\n        if (rules.preventSameHousehold) {\r\n          if (match.gifter.household !== households[0] || match.giftee.household !== households[0]) {\r\n            if (match.gifter.household === match.giftee.household) {\r\n              areMatchesValid = false;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n  \r\n        if (rules.preventSameGender) {\r\n          if (match.gifter.gender !== this.genders[0] || match.giftee.gender !== this.genders[0]) {\r\n            if (match.gifter.gender === match.giftee.gender) {\r\n              areMatchesValid = false;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n  \r\n        if (rules.preventSameAgeGroup) {\r\n          //logic\r\n        }\r\n      }\r\n    }\r\n\r\n    return areMatchesValid;\r\n  }\r\n\r\n  buildAdjacencyMatrix(people: Person[], households: string[], rules: Rules): number[][] {\r\n    let matrix: number[][] = [];\r\n\r\n    //build out the empty matrix\r\n    for (let i = 0; i < people.length; i++) {\r\n      matrix.push([]);\r\n      for (let j = 0; j < people.length; j++) {\r\n        matrix[i].push(0);\r\n      }\r\n    }\r\n\r\n    //iterate through the gifters one by one\r\n    for (let i = 0; i < people.length; i++) {\r\n      const gifter = people[i];\r\n\r\n      //now iterate through potential giftees and determine if they can match\r\n      for (let j = 0; j < people.length; j++) {\r\n        const giftee = people[j];\r\n        let isMatchGood = true;\r\n\r\n        //people can't give to themselves\r\n        if (gifter.name === giftee.name) {\r\n          isMatchGood = false;\r\n        }\r\n\r\n        //if the rules prevent circular gifting, account for that\r\n        if (rules.preventCircularGifting) {\r\n          //not sure how this will be implemented. We can't know if circular giving has occured until\r\n          //after the matrix has been generated. So that means we need to check it after that.\r\n          //Perhaps when we  check for circular giving, we add any matches that are circular to an array,\r\n          //call the function recursively but with those disallowed matches, and use that to winnow the field.\r\n        }\r\n\r\n        //if the rules prevent the same household, match on that only if both households are not the default\r\n        if (rules.preventSameHousehold) {\r\n          if (gifter.household !== households[0] || giftee.household !== households[0]) {\r\n            if (gifter.household === giftee.household) {\r\n              isMatchGood = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        //if the rules prevent the same gender, match on that only if both households are not the default\r\n        if (rules.preventSameGender) {\r\n          if (gifter.gender !== this.genders[0] || giftee.gender !== this.genders[0]) {\r\n            if (gifter.gender === giftee.gender) {\r\n              isMatchGood = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        //if the rules prevent the same age group, match on that only if both ages are not the default\r\n        if (rules.preventSameAgeGroup) {\r\n          //age group logic\r\n        }\r\n\r\n        if (isMatchGood) {\r\n          matrix[i][j]++;\r\n          matrix[j][i]++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return matrix;\r\n  }\r\n\r\n  shufflePeople(people: Person[]): Person[] {\r\n    let shuffledPeople = [...people];\r\n\r\n    for (let i = shuffledPeople.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledPeople[i], shuffledPeople[j]] = [shuffledPeople[j], shuffledPeople[i]];\r\n    }\r\n\r\n    return shuffledPeople;\r\n  }\r\n\r\n  // A DFS based recursive function that returns true if a match for the supplied vertex is possible\r\n  bipartiteMatching(gifterCount: number, gifteeCount: number, bpGraph: number[][], vertex: number, seen: boolean[], matchR: number[]): boolean {\r\n    //try every giver one by one\r\n    for (let v = 0; v < gifteeCount; v++) {\r\n      if (bpGraph[vertex][v] > 0 && !seen[v]) {\r\n        seen[v] = true;\r\n\r\n        if (matchR[v] < 0 || this.bipartiteMatching(gifterCount, gifteeCount, bpGraph, matchR[v], seen, matchR)) {\r\n          matchR[v] = vertex;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  //returns maximum number of matches from M to N\r\n  maximumBipartiteMatching(bpGraph: number[][], gifterCount: number, gifteeCount: number) {\r\n    let matchR = Array(gifteeCount);\r\n\r\n    for (let i = 0; i < gifteeCount; ++i) {\r\n      matchR[i] = -1;\r\n    }\r\n\r\n    let result = 0;\r\n    for (let u = 0; u < gifterCount; u++) {\r\n      let seen: boolean[] = Array(gifteeCount);\r\n      for (let i = 0; i < gifteeCount; ++i) {\r\n        seen[i] = false;\r\n      }\r\n\r\n      if (this.bipartiteMatching(gifterCount, gifteeCount, bpGraph, u, seen, matchR)) {\r\n        result++;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","import { Card, CardContent, CardHeader, Grid, Button } from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport HouseholdsList from './components/HouseholdsList';\r\nimport PeopleList from './components/PeopleList';\r\nimport RulesList from './components/RulesList';\r\nimport Person from './interfaces/Person';\r\nimport AppState from './interfaces/AppState';\r\nimport MatchesList from './components/MatchesList';\r\nimport MatchHelper from './matching/MatchHelper';\r\n\r\nexport default function App() {\r\n  const genders: string[] = ['None', 'Male', 'Female', 'Other'];\r\n  const matchHelper = new MatchHelper(genders);\r\n\r\n  const [state, setState] = useState<AppState>({\r\n    rules: {\r\n      preventCircularGifting: false,\r\n      preventSameHousehold: false,\r\n      preventSameGender: false,\r\n      preventSameAgeGroup: false\r\n    },\r\n    people: [],\r\n    households: ['None'],\r\n    matches: [],\r\n    areMatchesGenerating: false,\r\n    areMatchesValid: false,\r\n    matchesMessage: ''\r\n  });\r\n\r\n  const changeRule = (name: string, value: boolean) => {\r\n    setState({\r\n      ...state,\r\n      rules: {\r\n        ...state.rules,\r\n        [name]: value\r\n      }\r\n    });\r\n  }\r\n\r\n  const addPerson = (person: Person) => {\r\n    person.name.trim();\r\n    person.household?.trim();\r\n    person.gender?.trim();\r\n\r\n    const isValid = person.name !== undefined && person.name !== '' && !state.people.some(p => p.name === person.name)\r\n\r\n    if (isValid) {\r\n      setState({\r\n        ...state,\r\n        people: [\r\n          ...state.people,\r\n          person\r\n        ]\r\n      });\r\n    }\r\n  }\r\n\r\n  const removePerson = (name: string) => {\r\n    const index = state.people.findIndex(p => p.name === name);\r\n\r\n    if (state.people[index] !== undefined) {\r\n      state.people.splice(index, 1);\r\n      setState({\r\n        ...state,\r\n        people: [...state.people]\r\n      });\r\n    }\r\n  }\r\n\r\n  const resetPeople = () => {\r\n    setState({\r\n      ...state,\r\n      people: []\r\n    });\r\n  }\r\n\r\n  const addHousehold = (household: string) => {\r\n    household.trim();\r\n\r\n    const isValid = household !== undefined && household !== '' && !state.households.includes(household);\r\n\r\n    if (isValid) {\r\n      setState({\r\n        ...state,\r\n        households: [\r\n          ...state.households,\r\n          household\r\n        ]\r\n      });\r\n    }\r\n  }\r\n\r\n  const removeHousehold = (household: string) => {\r\n    const index = state.households.findIndex(h => h === household);\r\n\r\n    if (index !== 0 && state.households[index] !== undefined) {\r\n      const peopleWithHousehold = state.people.filter(p => p.household === state.households[index]);\r\n\r\n      peopleWithHousehold.forEach(person => {\r\n        person.household = state.households[0];\r\n      });\r\n\r\n      state.households.splice(index, 1);\r\n\r\n      setState({\r\n        ...state,\r\n        people: [...state.people],\r\n        households: [...state.households]\r\n      });\r\n    }\r\n  }\r\n\r\n  const generateMatches = () => {\r\n      if (state.people.length < 2) {\r\n        setState({\r\n          ...state,\r\n          areMatchesValid: false,\r\n          matchesMessage: 'Add 2 or more people to start matching.'\r\n        })\r\n      } else {\r\n        setState({\r\n          ...state,\r\n          areMatchesGenerating: true\r\n        });\r\n\r\n\r\n        let shuffledPeople = matchHelper.shufflePeople(state.people);\r\n        let adjacencyMatrix = matchHelper.buildAdjacencyMatrix(shuffledPeople, state.households, state.rules);\r\n        let maxMatches = matchHelper.maximumBipartiteMatching(adjacencyMatrix, state.people.length, state.people.length);\r\n\r\n        if (maxMatches === state.people.length) {\r\n          let matches = matchHelper.generateMatches(shuffledPeople, adjacencyMatrix)\r\n\r\n          while (!matchHelper.areMatchesValid(state.people.length, matches, state.households, state.rules)) {\r\n            shuffledPeople = matchHelper.shufflePeople(state.people);\r\n            adjacencyMatrix = matchHelper.buildAdjacencyMatrix(shuffledPeople, state.households, state.rules);\r\n            matches = matchHelper.generateMatches(shuffledPeople, adjacencyMatrix);\r\n          }\r\n\r\n          matches.sort((firstMatch, secondMatch) => firstMatch.gifter.name.localeCompare(secondMatch.gifter.name));\r\n          setState({\r\n            ...state,\r\n            matches: matches,\r\n            areMatchesGenerating: false,\r\n            areMatchesValid: true\r\n          });\r\n        } else {\r\n          setState({\r\n            ...state,\r\n            matches: [],\r\n            areMatchesGenerating: false,\r\n            areMatchesValid: false,\r\n            matchesMessage: 'No matches could be made with your current settings. Try changing something.'\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    useEffect(generateMatches, [state.people, state.households, state.rules]);\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardHeader title=\"Setup\" />\r\n              <CardContent>\r\n                <RulesList\r\n                  rules={state.rules}\r\n                  changeRule={changeRule}\r\n                />\r\n                <HouseholdsList\r\n                  households={state.households}\r\n                  addHousehold={addHousehold}\r\n                  removeHousehold={removeHousehold}\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <PeopleList\r\n              people={state.people}\r\n              households={state.households}\r\n              genders={genders}\r\n              addPerson={addPerson}\r\n              removePerson={removePerson}\r\n              resetPeople={resetPeople}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <MatchesList\r\n              matches={state.matches}\r\n              areMatchesGenerating={state.areMatchesGenerating}\r\n              areMatchesValid={state.areMatchesValid}\r\n              matchesMessage={state.matchesMessage}\r\n              regenerateMatches={generateMatches}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }"],"sourceRoot":""}