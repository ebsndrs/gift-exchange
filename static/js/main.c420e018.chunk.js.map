{"version":3,"sources":["components/HouseholdsList.tsx","components/PeopleList.tsx","components/RulesList.tsx","components/MatchesList.tsx","matching/MatchHelper.tsx","index.tsx","App.tsx"],"names":["HouseholdsList","props","useState","householdInput","setHouseholdInput","isAddButtonDisabled","setIsAddButtonDisabled","onAddButtonClicked","addHousehold","List","subheader","ListSubheader","ListItem","ListItemText","TextField","label","onChange","event","target","value","trimmedHousehold","trim","households","some","h","undefined","onHouseholdInputChange","onKeyUp","keyCode","preventDefault","onHouseholdInputKeyPress","ListItemSecondaryAction","Button","disabled","variant","color","onClick","filter","household","map","key","ListItemIcon","primary","fullWidth","removeHousehold","PeopleList","name","gender","genders","age","personInput","setPersonInput","addPerson","Card","CardHeader","title","CardContent","TableContainer","Table","TableHead","TableRow","TableCell","style","width","FormControl","id","placeholder","trimmedName","people","p","onPersonInputNameChange","onPersonInputKeyPress","InputLabel","Select","onSelectedHouseholdChange","MenuItem","onSelectedGenderChange","type","inputProps","min","TableBody","person","removePerson","RulesList","Switch","edge","changeRule","checked","rules","preventCircularGifting","preventSameHousehold","preventSameGender","preventSameAgeGroup","MatchesList","areMatchesGenerating","Box","justifyContent","CircularProgress","areMatchesValid","matches","match","index","gifter","giftee","textAlign","m","Typography","matchesMessage","MatchHelper","this","adjacencyMatrix","i","length","j","push","k","lastGifter","lastGiftee","peopleLength","matrix","isMatchGood","shuffledPeople","Math","floor","random","gifterCount","gifteeCount","bpGraph","vertex","seen","matchR","v","bipartiteMatching","Array","result","u","ReactDOM","render","matchHelper","state","setState","generateMatches","shufflePeople","buildAdjacencyMatrix","maximumBipartiteMatching","sort","firstMatch","secondMatch","localeCompare","useEffect","className","Grid","container","spacing","item","xs","md","includes","findIndex","forEach","splice","document","getElementById"],"mappings":"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","file":"static/js/main.c420e018.chunk.js","sourcesContent":["import { Button, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, ListSubheader, TextField } from '@material-ui/core';\r\nimport HouseIcon from '@material-ui/icons/House';\r\nimport React, { useState } from 'react';\r\nimport HouseholdsListProps from '../interfaces/HouseholdsListProps';\r\n\r\nexport default function HouseholdsList(props: HouseholdsListProps) {\r\n  const [householdInput, setHouseholdInput] = useState('');\r\n  const [isAddButtonDisabled, setIsAddButtonDisabled] = useState(true);\r\n\r\n  const onHouseholdInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setHouseholdInput(event.target.value);\r\n\r\n    const trimmedHousehold = event.target.value.trim();\r\n    const isAddButtonDisabled = trimmedHousehold === '' ||\r\n      props.households.some(h => h === trimmedHousehold) ||\r\n      trimmedHousehold === undefined;\r\n\r\n    setIsAddButtonDisabled(isAddButtonDisabled);\r\n  }\r\n\r\n  const onHouseholdInputKeyPress = (event: React.KeyboardEvent<HTMLDivElement | HTMLTextAreaElement>) => {\r\n    if (event.keyCode === 13) {\r\n      const shouldAddHousehold = householdInput !== '' &&\r\n        !props.households.some(h => h === householdInput) &&\r\n        householdInput !== undefined;\r\n      if (shouldAddHousehold) {\r\n        event.preventDefault();\r\n        onAddButtonClicked();\r\n      }\r\n    }\r\n  }\r\n\r\n  const onAddButtonClicked = () => {\r\n    props.addHousehold(householdInput);\r\n    setHouseholdInput('');\r\n    setIsAddButtonDisabled(true);\r\n  }\r\n\r\n  return (\r\n    <List subheader={<ListSubheader>Households</ListSubheader>}>\r\n      <ListItem>\r\n        <ListItemText>\r\n          <TextField\r\n            label=\"Add Household\"\r\n            onChange={(event) => onHouseholdInputChange(event)}\r\n            onKeyUp={(event) => onHouseholdInputKeyPress(event)}\r\n            value={householdInput}\r\n          // error={households.includes(householdInput)}\r\n          // helperText={households.includes(householdInput) ? \"That household already exists\" : \"\"}\r\n          />\r\n        </ListItemText>\r\n        <ListItemSecondaryAction>\r\n          <Button\r\n            disabled={isAddButtonDisabled}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={onAddButtonClicked}\r\n          >\r\n            Add\r\n          </Button>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      {props.households.filter(household => household !== props.households[0]).map(household =>\r\n        <ListItem key={household}>\r\n          <ListItemIcon>\r\n            <HouseIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary={household} />\r\n          <ListItemSecondaryAction>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => props.removeHousehold(household)}\r\n            >\r\n              Remove\r\n            </Button>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      )}\r\n    </List>\r\n  );\r\n}","import { Button, Card, CardContent, CardHeader, FormControl, InputLabel, MenuItem, Select, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Person from \"../interfaces/Person\";\r\nimport PeopleListProps from \"../interfaces/PeopleListProps\";\r\n\r\nexport default function PeopleList(props: PeopleListProps) {\r\n  const [personInput, setPersonInput] = useState<Person>({\r\n    name: '',\r\n    household: props.households[0],\r\n    gender: props.genders[0],\r\n    age: 0\r\n  });\r\n  const [isAddButtonDisabled, setIsAddButtonDisabled] = useState(true);\r\n\r\n  const onPersonInputNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setPersonInput({\r\n      ...personInput,\r\n      name: event.target.value\r\n    });\r\n\r\n    const trimmedName = event.target.value.trim();\r\n    const isAddButtonDisabled = trimmedName === '' ||\r\n      props.people.some(p => p.name === trimmedName) ||\r\n      trimmedName === undefined;\r\n\r\n    setIsAddButtonDisabled(isAddButtonDisabled);\r\n  }\r\n\r\n  const onPersonInputKeyPress = (event: React.KeyboardEvent<HTMLDivElement | HTMLTextAreaElement>) => {\r\n    if (event.keyCode === 13) {\r\n      const shouldAddPerson = personInput.name !== '' &&\r\n        !props.people.some(p => p.name === personInput.name) &&\r\n        personInput.name !== undefined;\r\n\r\n      if (shouldAddPerson) {\r\n        event.preventDefault();\r\n        onAddButtonClicked();\r\n      }\r\n    }\r\n  }\r\n\r\n  const onSelectedHouseholdChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = event.target.value as string;\r\n    value.trim();\r\n\r\n    if (value !== undefined && value !== '') {\r\n      setPersonInput({\r\n        ...personInput,\r\n        household: value\r\n      });\r\n    }\r\n  }\r\n\r\n  const onSelectedGenderChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = event.target.value as string;\r\n    value.trim();\r\n\r\n    if (value !== undefined && value !== '') {\r\n      setPersonInput({\r\n        ...personInput,\r\n        gender: value\r\n      });\r\n    }\r\n  }\r\n\r\n  const onAddButtonClicked = () => {\r\n    props.addPerson(personInput);\r\n\r\n    setPersonInput({\r\n      name: '',\r\n      household: props.households[0],\r\n      gender: props.genders[0],\r\n      age: 0\r\n    });\r\n\r\n    setIsAddButtonDisabled(true);\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"People\" />\r\n      <CardContent>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell style={{ width: '30%' }}>\r\n                  <FormControl fullWidth>\r\n                    <TextField\r\n                      id=\"personInputName\"\r\n                      placeholder=\"Name\"\r\n                      label=\"Name\"\r\n                      value={personInput.name}\r\n                      onChange={(event) => onPersonInputNameChange(event)}\r\n                      onKeyUp={(event) => onPersonInputKeyPress(event)}\r\n                    />\r\n                  </FormControl>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel>Household</InputLabel>\r\n                    <Select\r\n                      id=\"personInputHousehold\"\r\n                      value={personInput.household}\r\n                      onChange={(event: React.ChangeEvent<{ value: unknown; }>) => onSelectedHouseholdChange(event)}\r\n                    >\r\n                      {props.households.map(household =>\r\n                        <MenuItem key={household} value={household}>{household}</MenuItem>\r\n                      )}\r\n                    </Select>\r\n                  </FormControl>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel>Gender</InputLabel>\r\n                    <Select\r\n                      id=\"personInputGender\"\r\n                      value={personInput.gender}\r\n                      onChange={(event: React.ChangeEvent<{ value: unknown; }>) => onSelectedGenderChange(event)}\r\n                    >\r\n                      {props.genders.map(gender =>\r\n                        <MenuItem key={gender} value={gender}>{gender}</MenuItem>\r\n                      )}\r\n                    </Select>\r\n                  </FormControl>\r\n                </TableCell>\r\n                <TableCell style={{ width: '11%' }}>\r\n                  <FormControl fullWidth>\r\n                    <TextField\r\n                      id=\"personInputAge\"\r\n                      type=\"number\"\r\n                      placeholder=\"Age\"\r\n                      label=\"Age\"\r\n                      value={personInput.age}\r\n                      inputProps={{ min: '1' }}\r\n                    />\r\n                  </FormControl>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onAddButtonClicked}\r\n                    disabled={isAddButtonDisabled}\r\n                  >\r\n                    Add\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>Household</TableCell>\r\n                <TableCell>Gender</TableCell>\r\n                <TableCell>Age</TableCell>\r\n                <TableCell></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {props.people.map(person =>\r\n                <TableRow key={person.name}>\r\n                  <TableCell>{person.name}</TableCell>\r\n                  <TableCell>{person.household}</TableCell>\r\n                  <TableCell>{person.gender}</TableCell>\r\n                  <TableCell>{person.age > 0 ? person.age : \"None\"}</TableCell>\r\n                  <TableCell>\r\n                    <Button\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={() => props.removePerson(person.name)}\r\n                    >\r\n                      Remove\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","import { List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, ListSubheader, Switch } from '@material-ui/core';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport HouseIcon from '@material-ui/icons/House';\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport React from 'react';\r\nimport RulesListProps from '../interfaces/RulesListProps';\r\n\r\nexport default function RulesList(props: RulesListProps) {\r\n  return (\r\n    <List subheader={<ListSubheader>Rules</ListSubheader>}>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <SyncIcon />\r\n        </ListItemIcon>\r\n        <ListItemText id=\"switch-list-label-preventCircularGifting\" primary=\"Prevent Circular Gifting\" />\r\n        <ListItemSecondaryAction>\r\n          <Switch\r\n            edge=\"end\"\r\n            onChange={(event) => props.changeRule('preventCircularGifting', event.target.checked)}\r\n            checked={props.rules.preventCircularGifting}\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <HouseIcon />\r\n        </ListItemIcon>\r\n        <ListItemText id=\"switch-list-label-preventSameHousehold\" primary=\"Prevent Same Household\" />\r\n        <ListItemSecondaryAction>\r\n          <Switch\r\n            edge=\"end\"\r\n            onChange={(event) => props.changeRule('preventSameHousehold', event.target.checked)}\r\n            checked={props.rules.preventSameHousehold}\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <WcIcon />\r\n        </ListItemIcon>\r\n        <ListItemText id=\"switch-list-label-preventSameGender\" primary=\"Prevent Same Gender\" />\r\n        <ListItemSecondaryAction>\r\n          <Switch\r\n            edge=\"end\"\r\n            onChange={(event) => props.changeRule('preventSameGender', event.target.checked)}\r\n            checked={props.rules.preventSameGender}\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <DateRangeIcon />\r\n        </ListItemIcon>\r\n        <ListItemText id=\"switch-list-label-preventSameAgeGroup\" primary=\"Prevent Same Age Group\" />\r\n        <ListItemSecondaryAction>\r\n          <Switch\r\n            edge=\"end\"\r\n            onChange={(event) => props.changeRule('preventSameAgeGroup', event.target.checked)}\r\n            checked={props.rules.preventSameAgeGroup}\r\n          />\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n    </List>\r\n  );\r\n}","import { Box, Card, CardHeader, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport MatchesListProps from '../interfaces/MatchesListProps';\r\n\r\nexport default function MatchesList(props: MatchesListProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Matches\" />\r\n      {props.areMatchesGenerating ?\r\n        (\r\n          <Box justifyContent=\"center\">\r\n            <CircularProgress />\r\n          </Box>\r\n        ) :\r\n        (\r\n          props.areMatchesValid ?\r\n            (\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Gifter</TableCell>\r\n                      <TableCell>Giftee</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {props.matches.map((match, index) =>\r\n                      <TableRow key={index}>\r\n                        <TableCell>{match.gifter.name}</TableCell>\r\n                        <TableCell>{match.giftee.name}</TableCell>\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            ) :\r\n            (\r\n              <Box textAlign=\"center\" m={3}>\r\n                <Typography>{props.matchesMessage}</Typography>\r\n              </Box>\r\n            )\r\n        )}\r\n    </Card>\r\n  );\r\n}","import Person from \"../interfaces/Person\";\r\nimport Rules from \"../interfaces/Rules\";\r\nimport Match from \"../interfaces/Match\";\r\n\r\nexport default class MatchHelper {\r\n  genders: string[];\r\n\r\n  constructor(genders: string[]) {\r\n    this.genders = genders;\r\n  }\r\n\r\n  generateMatches(people: Person[], adjacencyMatrix: number[][]): Match[] {\r\n    let matches: Match[] = [];\r\n\r\n    //iterate through the gifters to assign each one a match\r\n    for (let i = 0; i < people.length; i++) {\r\n      const gifter = people[i];\r\n\r\n      for (let j = 0; j < people.length; j++) {\r\n        const giftee = people[j];\r\n\r\n        if (adjacencyMatrix[i][j] > 0 && adjacencyMatrix[j][i] > 0) {\r\n          matches.push({ gifter: gifter, giftee: giftee });\r\n          adjacencyMatrix[i][j] = 0;\r\n          adjacencyMatrix[j][i] = 0;\r\n          for (let k = 0; k < adjacencyMatrix[i].length; k++) {\r\n            adjacencyMatrix[i][k] = 0;\r\n            adjacencyMatrix[k][i] = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (matches.length < people.length) {\r\n      const lastGifter = people[people.length - 1];\r\n      const lastGiftee = people[0];\r\n\r\n      matches.push({ gifter: lastGifter, giftee: lastGiftee });\r\n    }\r\n\r\n    return matches;\r\n  }\r\n\r\n  areMatchesValid(peopleLength: number, matches: Match[], households: string[], rules: Rules): boolean {\r\n    let areMatchesValid = true;\r\n\r\n    //matches length must be equal to people length\r\n    if (matches.length !== peopleLength) {\r\n      areMatchesValid = false;\r\n    } else {\r\n      for (let i = 0; i < matches.length; i++) {\r\n        const match = matches[i];\r\n  \r\n        //one cannot give to themself\r\n        if (match.gifter.name === match.giftee.name) {\r\n          areMatchesValid = false;\r\n          break;\r\n        }\r\n  \r\n        //if there's more than one of the same gifter, it's invalid\r\n        if (matches.filter(m => m.gifter.name === match.gifter.name).length > 1) {\r\n          areMatchesValid = false;\r\n          break;\r\n        }\r\n  \r\n        //if there's more than one of the same giftee, it's invalid\r\n        if (matches.filter(m => m.giftee.name === match.giftee.name).length > 1) {\r\n          areMatchesValid = false;\r\n          break;\r\n        }\r\n  \r\n        if (rules.preventCircularGifting) {\r\n          //logic\r\n        }\r\n  \r\n        if (rules.preventSameHousehold) {\r\n          if (match.gifter.household !== households[0] || match.giftee.household !== households[0]) {\r\n            if (match.gifter.household === match.giftee.household) {\r\n              areMatchesValid = false;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n  \r\n        if (rules.preventSameGender) {\r\n          if (match.gifter.gender !== this.genders[0] || match.giftee.gender !== this.genders[0]) {\r\n            if (match.gifter.gender === match.giftee.gender) {\r\n              areMatchesValid = false;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n  \r\n        if (rules.preventSameAgeGroup) {\r\n          //logic\r\n        }\r\n      }\r\n    }\r\n\r\n    return areMatchesValid;\r\n  }\r\n\r\n  buildAdjacencyMatrix(people: Person[], households: string[], rules: Rules): number[][] {\r\n    let matrix: number[][] = [];\r\n\r\n    //build out the empty matrix\r\n    for (let i = 0; i < people.length; i++) {\r\n      matrix.push([]);\r\n      for (let j = 0; j < people.length; j++) {\r\n        matrix[i].push(0);\r\n      }\r\n    }\r\n\r\n    //iterate through the gifters one by one\r\n    for (let i = 0; i < people.length; i++) {\r\n      const gifter = people[i];\r\n\r\n      //now iterate through potential giftees and determine if they can match\r\n      for (let j = 0; j < people.length; j++) {\r\n        const giftee = people[j];\r\n        let isMatchGood = true;\r\n\r\n        //people can't give to themselves\r\n        if (gifter.name === giftee.name) {\r\n          isMatchGood = false;\r\n        }\r\n\r\n        //if the rules prevent circular gifting, account for that\r\n        if (rules.preventCircularGifting) {\r\n          //not sure how this will be implemented. We can't know if circular giving has occured until\r\n          //after the matrix has been generated. So that means we need to check it after that.\r\n          //Perhaps when we  check for circular giving, we add any matches that are circular to an array,\r\n          //call the function recursively but with those disallowed matches, and use that to winnow the field.\r\n        }\r\n\r\n        //if the rules prevent the same household, match on that only if both households are not the default\r\n        if (rules.preventSameHousehold) {\r\n          if (gifter.household !== households[0] || giftee.household !== households[0]) {\r\n            if (gifter.household === giftee.household) {\r\n              isMatchGood = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        //if the rules prevent the same gender, match on that only if both households are not the default\r\n        if (rules.preventSameGender) {\r\n          if (gifter.gender !== this.genders[0] || giftee.gender !== this.genders[0]) {\r\n            if (gifter.gender === giftee.gender) {\r\n              isMatchGood = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        //if the rules prevent the same age group, match on that only if both ages are not the default\r\n        if (rules.preventSameAgeGroup) {\r\n          //age group logic\r\n        }\r\n\r\n        if (isMatchGood) {\r\n          matrix[i][j]++;\r\n          matrix[j][i]++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return matrix;\r\n  }\r\n\r\n  shufflePeople(people: Person[]): Person[] {\r\n    let shuffledPeople = [...people];\r\n\r\n    for (let i = shuffledPeople.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledPeople[i], shuffledPeople[j]] = [shuffledPeople[j], shuffledPeople[i]];\r\n    }\r\n\r\n    return shuffledPeople;\r\n  }\r\n\r\n  // A DFS based recursive function that returns true if a match for the supplied vertex is possible\r\n  bipartiteMatching(gifterCount: number, gifteeCount: number, bpGraph: number[][], vertex: number, seen: boolean[], matchR: number[]): boolean {\r\n    //try every giver one by one\r\n    for (let v = 0; v < gifteeCount; v++) {\r\n      if (bpGraph[vertex][v] > 0 && !seen[v]) {\r\n        seen[v] = true;\r\n\r\n        if (matchR[v] < 0 || this.bipartiteMatching(gifterCount, gifteeCount, bpGraph, matchR[v], seen, matchR)) {\r\n          matchR[v] = vertex;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  //returns maximum number of matches from M to N\r\n  maximumBipartiteMatching(bpGraph: number[][], gifterCount: number, gifteeCount: number) {\r\n    let matchR = Array(gifteeCount);\r\n\r\n    for (let i = 0; i < gifteeCount; ++i) {\r\n      matchR[i] = -1;\r\n    }\r\n\r\n    let result = 0;\r\n    for (let u = 0; u < gifterCount; u++) {\r\n      let seen: boolean[] = Array(gifteeCount);\r\n      for (let i = 0; i < gifteeCount; ++i) {\r\n        seen[i] = false;\r\n      }\r\n\r\n      if (this.bipartiteMatching(gifterCount, gifteeCount, bpGraph, u, seen, matchR)) {\r\n        result++;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","import { Card, CardContent, CardHeader, Grid, Button } from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport HouseholdsList from './components/HouseholdsList';\r\nimport PeopleList from './components/PeopleList';\r\nimport RulesList from './components/RulesList';\r\nimport Person from './interfaces/Person';\r\nimport AppState from './interfaces/AppState';\r\nimport MatchesList from './components/MatchesList';\r\nimport MatchHelper from './matching/MatchHelper';\r\n\r\nexport default function App() {\r\n  const genders: string[] = ['None', 'Male', 'Female', 'Other'];\r\n  const matchHelper = new MatchHelper(genders);\r\n\r\n  const [state, setState] = useState<AppState>({\r\n    rules: {\r\n      preventCircularGifting: false,\r\n      preventSameHousehold: false,\r\n      preventSameGender: false,\r\n      preventSameAgeGroup: false\r\n    },\r\n    people: [],\r\n    households: ['None'],\r\n    matches: [],\r\n    areMatchesGenerating: false,\r\n    areMatchesValid: false,\r\n    matchesMessage: ''\r\n  });\r\n\r\n  const changeRule = (name: string, value: boolean) => {\r\n    setState({\r\n      ...state,\r\n      rules: {\r\n        ...state.rules,\r\n        [name]: value\r\n      }\r\n    });\r\n  }\r\n\r\n  const addPerson = (person: Person) => {\r\n    person.name.trim();\r\n    person.household?.trim();\r\n    person.gender?.trim();\r\n\r\n    const isValid = person.name !== undefined && person.name !== '' && !state.people.some(p => p.name === person.name)\r\n\r\n    if (isValid) {\r\n      setState({\r\n        ...state,\r\n        people: [\r\n          ...state.people,\r\n          person\r\n        ]\r\n      });\r\n    }\r\n  }\r\n\r\n  const removePerson = (name: string) => {\r\n    const index = state.people.findIndex(p => p.name === name);\r\n\r\n    if (state.people[index] !== undefined) {\r\n      state.people.splice(index, 1);\r\n      setState({\r\n        ...state,\r\n        people: [...state.people]\r\n      });\r\n    }\r\n  }\r\n\r\n  const addHousehold = (household: string) => {\r\n    household.trim();\r\n\r\n    const isValid = household !== undefined && household !== '' && !state.households.includes(household);\r\n\r\n    if (isValid) {\r\n      setState({\r\n        ...state,\r\n        households: [\r\n          ...state.households,\r\n          household\r\n        ]\r\n      });\r\n    }\r\n  }\r\n\r\n  const removeHousehold = (household: string) => {\r\n    const index = state.households.findIndex(h => h === household);\r\n\r\n    if (index !== 0 && state.households[index] !== undefined) {\r\n      const peopleWithHousehold = state.people.filter(p => p.household === state.households[index]);\r\n\r\n      peopleWithHousehold.forEach(person => {\r\n        person.household = state.households[0];\r\n      });\r\n\r\n      state.households.splice(index, 1);\r\n\r\n      setState({\r\n        ...state,\r\n        people: [...state.people],\r\n        households: [...state.households]\r\n      });\r\n    }\r\n  }\r\n\r\n  const fillTestData = () => {\r\n    setState({\r\n      ...state,\r\n      households: [...state.households, 'Household 1'],\r\n      people: [\r\n        {\r\n          name: 'Test 1',\r\n          household: 'Household 1',\r\n          gender: genders[0],\r\n          age: 0\r\n        },\r\n        {\r\n          name: 'Test 2',\r\n          household: 'None',\r\n          gender: genders[0],\r\n          age: 0\r\n        },\r\n        {\r\n          name: 'Test 3',\r\n          household: 'Household 1',\r\n          gender: genders[0],\r\n          age: 0\r\n        },\r\n        {\r\n          name: 'Test 4',\r\n          household: 'None',\r\n          gender: genders[0],\r\n          age: 0\r\n        }\r\n      ]\r\n    });\r\n  }\r\n\r\n  const generateMatches = () => {\r\n    if (state.people.length < 2) {\r\n      setState({\r\n        ...state,\r\n        areMatchesValid: false,\r\n        matchesMessage: 'Add 2 or more people to start matching.'\r\n      })\r\n    } else {\r\n      setState({\r\n        ...state,\r\n        areMatchesGenerating: true\r\n      });\r\n\r\n\r\n      let shuffledPeople = matchHelper.shufflePeople(state.people);\r\n      let adjacencyMatrix = matchHelper.buildAdjacencyMatrix(shuffledPeople, state.households, state.rules);\r\n      let maxMatches = matchHelper.maximumBipartiteMatching(adjacencyMatrix, state.people.length, state.people.length);\r\n\r\n      if (maxMatches === state.people.length) {\r\n        let matches = matchHelper.generateMatches(shuffledPeople, adjacencyMatrix)\r\n\r\n        while (!matchHelper.areMatchesValid(state.people.length, matches, state.households, state.rules)) {\r\n          shuffledPeople = matchHelper.shufflePeople(state.people);\r\n          adjacencyMatrix = matchHelper.buildAdjacencyMatrix(shuffledPeople, state.households, state.rules);\r\n          matches = matchHelper.generateMatches(shuffledPeople, adjacencyMatrix);\r\n        }\r\n\r\n        matches.sort((firstMatch, secondMatch) => firstMatch.gifter.name.localeCompare(secondMatch.gifter.name));\r\n        setState({\r\n          ...state,\r\n          matches: matches,\r\n          areMatchesGenerating: false,\r\n          areMatchesValid: true\r\n        });\r\n      } else {\r\n        setState({\r\n          ...state,\r\n          matches: [],\r\n          areMatchesGenerating: false,\r\n          areMatchesValid: false,\r\n          matchesMessage: 'No matches could be made with your current settings. Try changing something.'\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(generateMatches, [state.people, state.households, state.rules]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={3}>\r\n          <Card>\r\n            <Button onClick={fillTestData}>Test Data</Button>\r\n            <Button onClick={generateMatches}>Generate matches</Button>\r\n            <CardHeader title=\"Setup\" />\r\n            <CardContent>\r\n              <RulesList\r\n                rules={state.rules}\r\n                changeRule={changeRule}\r\n              />\r\n              <HouseholdsList\r\n                households={state.households}\r\n                addHousehold={addHousehold}\r\n                removeHousehold={removeHousehold}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <PeopleList\r\n            people={state.people}\r\n            households={state.households}\r\n            genders={genders}\r\n            addPerson={addPerson}\r\n            removePerson={(name: string) => removePerson(name)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={3}>\r\n          <MatchesList\r\n            matches={state.matches}\r\n            areMatchesGenerating={state.areMatchesGenerating}\r\n            areMatchesValid={state.areMatchesValid}\r\n            matchesMessage={state.matchesMessage}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}"],"sourceRoot":""}